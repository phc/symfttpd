#!/usr/bin/env php
<?php
/**
 * @author Laurent Bachelier <laurent@bachelier.name>
 */
require dirname(__FILE__).'/lib/bootstrap.php';
require dirname(__FILE__).'/lib/Template.php';
require dirname(__FILE__).'/lib/Tail.php';
require dirname(__FILE__).'/lib/Options.php';

$options = Options::getOptions();
$project_path = Symfony::getProjectPath();
Template::writeConfig($options);

// Pretty information. Nothing interesting code-wise.
log_message('lighttpd started on '
  . Color::style('bright')
  . (strlen($options['bind']) ? $options['bind'] : 'all interfaces')
  . Color::style('normal')
  . ', port '
  . Color::style('bright') . $options['port'] . Color::style('normal')
  . '.');
log_message("\nAvailable applications:");
$apps = array();
foreach (new DirectoryIterator($project_path.'/web') as $file)
{
  if ($file->isFile() && preg_match('/\.php$/', $file->getFilename()))
  {
    $apps[] = $file->getFilename();
  }
}
$host = in_array($options['bind'], array(false, '0.0.0.0', '::'), true)
      ? 'localhost'
      : $options['bind'];
sort($apps);
foreach ($apps as $app)
{
  log_message(' http://'.$host.':'.$options['port']
      .'/'.Color::style('bright').$app.Color::style('normal'));
}
log_message("\nPress Ctrl+C to stop serving.");
flush();

if (!$options['fork'])
{
  passthru($options['lighttpd_cmd'].' -D -f '.escapeshellarg($options['config_file']));
  log_message('Terminated.');
}
else
{
  if ($options['tail'])
  {
    $multitail = new MultiTail();
    $multitail->add('access', new Tail($options['log_dir'].'/access.log'),
      Color::fgColor('blue'), Color::style('normal'));
    $multitail->add(' error', new Tail($options['log_dir'].'/error.log'),
      Color::style('bright').Color::fgColor('red'), Color::style('normal'));
    // We have to do it before the fork to capture the startup messages
    $multitail->consume();
  }
  $pid = pcntl_fork();
  if ($pid)
  {
    // Parent process
    $prev_genconf = null;
    while (false !== sleep(1))
    {
      $handle = popen($options['php_cmd'].' '.$options['config_dir'].'/lighttpd.php', 'r');
      $genconf = stream_get_contents($handle);
      pclose($handle);
      if ($prev_genconf !== null && $prev_genconf !== $genconf)
      {
        touch($options['restartfile']);
        !PosixTools::killPid($options['pidfile']);
      }
      $prev_genconf = $genconf;

      if ($options['tail'])
      {
        $multitail->consume();
      }

      // If the children is defunct, we are finished here
      if (pcntl_waitpid($pid, $status, WNOHANG))
      {
        exit(0);
      }
    }
  }
  elseif ($pid == 0)
  {
    // Child process
    do
    {
      if (file_exists($options['restartfile']))
      {
        unlink($options['restartfile']);
      }
      passthru($options['lighttpd_cmd'].' -D -f '.escapeshellarg($options['config_file']));
      if (!file_exists($options['restartfile']))
      {
        log_message('Terminated.');
      }
      else
      {
        log_message(Color::style('bright').'Something in web/ changed. Restarting lighttpd.'.Color::style('normal'));
        Template::writeConfig($options);
      }
    } while (file_exists($options['restartfile']));
  }
  else
  {
    log_message('Unable to fork!', true);
    exit(1);
  }
}
